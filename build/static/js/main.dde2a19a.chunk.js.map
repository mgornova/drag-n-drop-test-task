{"version":3,"sources":["actions.ts","helpers.ts","config.ts","reducer.ts","store.ts","components/setup.tsx","components/app.tsx","index.tsx"],"names":["ActionTypes","getRandomInt","from","to","min","Math","ceil","max","floor","random","generateRandomRectangles","count","length","res","i","width","height","id","x","y","color","toString","initialState","container","blocks","Store","createStore","state","action","type","setPosition","payload","position","generateBlocks","clear","applyMiddleware","logger","Setup","onSetup","useState","undefined","setCount","className","value","onChange","event","target","round","onClick","App","MAX_COUNT","lastZIndex","setLastZIndex","dispatch","useDispatch","containerSize","useSelector","useCallback","onReset","onDragStart","data","node","style","zIndex","onDragStop","dataset","Object","keys","map","key","bounds","defaultPosition","onStart","onStop","data-id","background","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.dde2a19a.chunk.js","sourcesContent":["import { action } from 'typesafe-actions';\n\nexport enum ActionTypes {\n  generateBlocks = 'generate random blocks',\n  setPosition = 'set new position of block',\n  clear = 'clear all block',\n}\n\nexport const generateBlocks = (count?: number) => action(ActionTypes.generateBlocks, { count });\nexport const setPosition = (id: string, position: { x: number; y: number }) => action(ActionTypes.setPosition, { id, position });\nexport const clear = () => action(ActionTypes.clear);\n\nexport type IActions = ReturnType<typeof generateBlocks>\n  | ReturnType<typeof setPosition>\n  | ReturnType<typeof clear>;\n","import { IDictionary, IRectangle } from './types';\nimport { MIN_COUNT, MAX_COUNT, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE, CONTAINER_WIDTH, CONTAINER_HEIGHT } from './config';\n\nconst getRandomInt = (from: number, to: number) => {\n  const min = Math.ceil(from);\n  const max = Math.floor(to);\n  return Math.floor(Math.random() * (max + 1 - min)) + min; // Максимум и минимум включительно\n}\n\nconst getRandomColor = () => `#${Math.floor(Math.random()*0xFFFFFF).toString(16)}`;\n\nexport const generateRandomRectangles = (count?: number): IDictionary<IRectangle> => {\n  const length = count ?? Math.floor(Math.random() * (MAX_COUNT + 1 - MIN_COUNT)) + 1;\n  const res: IDictionary<IRectangle> = {};\n\n  for (let i = 1; i <= length; i++) {\n    const width = getRandomInt(MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    const height = getRandomInt(MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    res[i] = {\n      id: i,\n      width,\n      height,\n      x: getRandomInt(0, CONTAINER_WIDTH - width),\n      y: getRandomInt(0, CONTAINER_HEIGHT - height),\n      color: getRandomColor(),\n    };\n  }\n\n  return res;\n};\n","export const CONTAINER_WIDTH = 600;\nexport const CONTAINER_HEIGHT = 400;\nexport const MIN_COUNT = 1;\nexport const MAX_COUNT = 20;\nexport const MIN_BLOCK_SIZE = 10;\nexport const MAX_BLOCK_SIZE = 100;\n","import { ActionTypes, IActions } from './actions';\nimport { generateRandomRectangles } from './helpers';\nimport { IDictionary, IRectangle } from './types';\nimport { CONTAINER_WIDTH, CONTAINER_HEIGHT } from './config';\n\nexport interface IState {\n  container: {\n    width: number;\n    height: number;\n  };\n  blocks: IDictionary<IRectangle>;\n}\n\nexport const initialState: IState = {\n  container: {\n    width: CONTAINER_WIDTH,\n    height: CONTAINER_HEIGHT,\n  },\n  blocks: {},\n};\n\nexport const reducer = (state: IState = initialState, action: IActions): IState => {\n  switch (action.type) {\n    case ActionTypes.setPosition: {\n      return {\n        ...state,\n        blocks: {\n          ...state.blocks,\n          [action.payload.id]: {\n            ...state.blocks[action.payload.id],\n            x: action.payload.position.x,\n            y: action.payload.position.y,\n          }\n        }\n      }\n    }\n    case ActionTypes.generateBlocks: {\n      return {\n        ...state,\n        blocks: generateRandomRectangles(action.payload.count),\n      }\n    }\n    case ActionTypes.clear: {\n      return initialState;\n    }\n    default:\n      return state;\n  }\n};","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { reducer } from './reducer';\n\nexport const Store = createStore(reducer, applyMiddleware(logger));\n","import React, { useState, ChangeEvent } from 'react';\nimport { MIN_COUNT, MAX_COUNT } from '../config';\n\ninterface IProps {\n  onSetup: (count?: number) => void;\n}\n\nexport const Setup = ({ onSetup }: IProps) => {\n  const [count, setCount] = useState<number | undefined>(undefined);\n\n  const onSetCount = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === '') {\n      setCount(undefined);\n      return;\n    }\n\n    const round = Math.round(+event.target.value);\n    const newValue = round < MIN_COUNT ? MIN_COUNT : round > MAX_COUNT ? MAX_COUNT : round;\n    setCount(newValue);\n  };\n\n  return <div className='setup-container'>\n    <h1 className='setup-title'>Настройка приложения</h1>\n    <p className='setup-description'>Введите произвольное число от {MIN_COUNT} до {MAX_COUNT} для генерации случайных прямоугольников.\n      Оставьте поле пустым, чтобы сгенерировать случайное количество.</p>\n    <label className='setup-label'>Количество прямоугольников:</label>\n    <input className='setup-input' type='number' min={MIN_COUNT} max={MAX_COUNT} value={count} onChange={onSetCount} />\n    <p><button className='primary-button' onClick={() => onSetup(count)}>Создать</button></p>\n  </div>;\n};\n","import React, { useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Draggable, { DraggableEvent, DraggableData } from 'react-draggable';\nimport { MAX_COUNT } from '../config';\nimport { Setup } from './setup';\nimport { IState as IReduxState } from '../reducer';\nimport { setPosition, generateBlocks, clear } from '../actions';\n\nexport const App = () => {\n  // чтобы перемещаемый элемент всегда оказывался самым верхним\n  const [lastZIndex, setLastZIndex] = useState(MAX_COUNT + 1);\n\n  const dispatch = useDispatch();\n  const containerSize = useSelector((state: IReduxState) => state.container);\n  const blocks = useSelector((state: IReduxState) => state.blocks);\n\n  const onSetup = useCallback((count?: number) => {\n    dispatch(generateBlocks(count));\n  }, [dispatch]);\n\n  const onReset = useCallback(() => {\n    dispatch(clear());\n  }, [dispatch]);\n\n  const onDragStart = useCallback((event: DraggableEvent, data: DraggableData) => {\n    data.node.style.zIndex = `${lastZIndex + 1}`;\n    setLastZIndex(lastZIndex + 1);\n  }, [lastZIndex]);\n\n  const onDragStop = useCallback((event: DraggableEvent, data: DraggableData) => {\n    if (data.node.dataset.id !== undefined) {\n      dispatch(setPosition(data.node.dataset.id, { x: data.x, y: data.y }));\n    }\n  }, [dispatch]);\n\n  return <div className='app'>\n    {!blocks || Object.keys(blocks).length === 0 ? <Setup onSetup={onSetup} /> : null}\n      {blocks && Object.keys(blocks).length > 0 ? <>\n        <div className='container' style={{width: `${containerSize.width}px`, height: `${containerSize.height}px`}}>\n          {Object.keys(blocks).map((id) => (\n            <Draggable\n              key={id}\n              bounds='parent'\n              defaultPosition={{ x: blocks[id].x, y: blocks[id].y }}\n              onStart={onDragStart}\n              onStop={onDragStop}\n            >\n              <div className='draggable-block' data-id={id} style={{\n                background: blocks[id].color,\n                width: `${blocks[id].width}px`,\n                height: `${blocks[id].height}px`,\n              }} />\n            </Draggable>\n          ))}\n        </div>\n        <button className='primary-button' onClick={onReset}>Начать заново</button>\n        </>\n        : null}\n  </div>;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Store } from './store';\nimport { App } from './components/app';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}